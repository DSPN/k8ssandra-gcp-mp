x-google-marketplace:

  schemaVersion: v2

  applicationApiVersion: v1beta1

  publishedVersion: "4.0.0-k8ssandra1.5.1-cma4.0.0b2"
  publishedVersionMetadata:
    releaseNote: >-
      Initial release.
    releaseTypes:
      - Feature
    recommended: true

  clusterConstraints:
    resources:
      - replicas: 3
        requests:
          cpu: 3200m
          memory: 6Gi
        affinity:
          simpleNodeAffinity:
            type: REQUIRE_ONE_NODE_PER_REPLICA
  
  images:

    '':
      properties:
        k8ssandra.cassandra.image.registry:
          type: REGISTRY
        k8ssandra.cassandra.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.cassandra.image.tag:
          type: TAG

    ubbagent:
      properties:
        ubbagent-image-repository:
          type: FULL

    cassandra-config-builder:
      properties:
        k8ssandra.cassandra.configBuilder.image.registry:
          type: REGISTRY
        k8ssandra.cassandra.configBuilder.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.cassandra.configBuilder.image.tag:
          type: TAG

    cassandra-jmx-credentials:
      properties:
        k8ssandra.cassandra.jmxCredentialsConfig.image.registry:
          type: REGISTRY
        k8ssandra.cassandra.jmxCredentialsConfig.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.cassandra.jmxCredentialsConfig.image.tag:
          type: TAG

    cassandra-system-logger:
      properties:
        k8ssandra.cassandra.loggingSidecar.image.registry:
          type: REGISTRY
        k8ssandra.cassandra.loggingSidecar.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.cassandra.loggingSidecar.image.tag:
          type: TAG

    stargate:
      properties:
        k8ssandra.stargate.image.registry:
          type: REGISTRY
        k8ssandra.stargate.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.stargate.image.tag:
          type: TAG

    stargate-wait-for-cassandra:
      properties:
        k8ssandra.stargate.waitForCassandra.image.registry:
          type: REGISTRY
        k8ssandra.stargate.waitForCassandra.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.stargate.waitForCassandra.image.tag:
          type: TAG

    reaper:
      properties:
        k8ssandra.reaper.image.registry:
          type: REGISTRY
        k8ssandra.reaper.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.reaper.image.tag:
          type: TAG

    medusa:
      properties:
        k8ssandra.medusa.image.registry:
          type: REGISTRY
        k8ssandra.medusa.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.medusa.image.tag:
          type: TAG

    cleaner:
      properties:
        k8ssandra.cleaner.image.registry:
          type: REGISTRY
        k8ssandra.cleaner.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.cleaner.image.tag:
          type: TAG

    client:
      properties:
        k8ssandra.client.image.registry:
          type: REGISTRY
        k8ssandra.client.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.client.image.tag:
          type: TAG

    cass-operator:
      properties:
        k8ssandra.cass-operator.image.registry:
          type: REGISTRY
        k8ssandra.cass-operator.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.cass-operator.image.tag:
          type: TAG

    reaper-operator:
      properties:
        k8ssandra.reaper-operator.image.registry:
          type: REGISTRY
        k8ssandra.reaper-operator.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.reaper-operator.image.tag:
          type: TAG

    medusa-operator:
      properties:
        k8ssandra.medusa-operator.image.registry:
          type: REGISTRY
        k8ssandra.medusa-operator.image.repository:
          type: REPO_WITHOUT_REGISTRY
        k8ssandra.medusa-operator.image.tag:
          type: TAG

    prometheus:
      properties:
        k8ssandra.kube-prometheus-stack.prometheus.prometheusSpec.image.repository:
          type: REPO_WITH_REGISTRY
        k8ssandra.kube-prometheus-stack.prometheus.prometheusSpec.image.tag:
          type: TAG

    prometheus-config-reloader:
      properties:
        k8ssandra.kube-prometheus-stack.prometheusOperator.prometheusConfigReloaderImage.repository:
          type: REPO_WITH_REGISTRY
        k8ssandra.kube-prometheus-stack.prometheusOperator.prometheusConfigReloaderImage.tag:
          type: TAG

    prometheus-operator:
      properties:
        k8ssandra.kube-prometheus-stack.prometheusOperator.image.repository:
          type: REPO_WITH_REGISTRY
        k8ssandra.kube-prometheus-stack.prometheusOperator.image.tag:
          type: TAG

    grafana:
      properties:
        k8ssandra.kube-prometheus-stack.grafana.image.repository:
          type: REPO_WITH_REGISTRY
        k8ssandra.kube-prometheus-stack.grafana.image.tag:
          type: TAG

    grafana-sidecar:
      properties:
        k8ssandra.kube-prometheus-stack.grafana.sidecar.image.repository:
          type: REPO_WITH_REGISTRY
        k8ssandra.kube-prometheus-stack.grafana.sidecar.image.tag:
          type: TAG

    kube-prometheus-stack-admission-patch:
      properties:
        k8ssandra.kube-prometheus-stack.prometheusOperator.admissionWebhooks.patch.image.repository:
          type: REPO_WITH_REGISTRY
        k8ssandra.kube-prometheus-stack.prometheusOperator.admissionWebhooks.patch.image.tag:
          type: TAG

    admission-controller:
      properties:
        admiss-ctrl-image-repository:
          type: FULL

  deployerServiceAccount:
    description: >
      creates application resources
    roles:
    - type: ClusterRole
      rulesType: CUSTOM
      rules:
      - apiGroups: ['admissionregistration.k8s.io','apiextensions.k8s.io','apiregistration.k8s.io','apps','authentication.k8s.io','authorization.k8s.io','batch','certificates.k8s.io','coordination.k8s.io','core','discovery.k8s.io','events.k8s.io','flowcontrol.apiserver.k8s.io','internal.apiserver.k8s.io','networking.k8s.io','node.k8s.io','policy','rbac.authorization.k8s.io','scheduling.k8s.io','storage.k8s.io']
        resources: ['*']
        verbs: ['*']

properties:

  name:
    type: string
    x-google-marketplace:
      type: NAME

  namespace:
    type: string
    x-google-marketplace:
      type: NAMESPACE

  reportingSecret:
    type: string
    x-google-marketplace:
      type: REPORTING_SECRET

  admiss-ctrl-sa:
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      serviceAccount:
        description: >
          service account for admission controller
        roles:
          - type: ClusterRole
            rulesType: CUSTOM
            rules:
              - apiGroups: ["", "apps", "cassandra.datastax.com"]
                resources: ["cassandradatacenters", "deployments", "services", "secrets"]
                verbs: ["list", "delete", "patch", "update"]

  cass-operator-sa:
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      serviceAccount:
        description: >
          service account for cass-operator
        roles:
          - type: Role
            rulesType: CUSTOM
            rules:
              - apiGroups: ['']
                resources: ['pods','services','endpoints','persistentvolumeclaims','events','configmaps','secrets']
                verbs: ['*']
              - apiGroups: ['']
                resources: ['namespaces']
                verbs: ['get']
              - apiGroups: ['apps']
                resources: ['deployments','daemonsets','replicasets','statefulsets']
                verbs: ['*']
              - apiGroups: ['monitoring.coreos.com']
                resources: ['servicemonitors']
                verbs: ['get', 'create']
              - apiGroups: ['apps']
                resources: ['deployments/finalizers']
                verbs: ['update']
              - apiGroups: ['datastax.com']
                resources: ['*']
                verbs: ['*']
              - apiGroups: ['policy']
                resources: ['poddisruptionbudgets']
                verbs: ['*']
              - apiGroups: ['cassandra.datastax.com']
                resources: ['*']
                verbs: ['*']
              - apiGroups: ['batch']
                resources: ['*']
                verbs: ['*']
              - apiGroups: ['coordination.k8s.io']
                resources: ['leases']
                verbs: ['*']
              - apiGroups: ['control.k8ssandra.io']
                resources: ['cassandratasks']
                verbs: ['*']
          - type: ClusterRole
            rulesType: CUSTOM
            rules:
              - apiGroups: ['']
                resources: ['nodes','persistentvolumes']
                verbs: ['get','watch','list']

  webhook-admiss-sa:
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      serviceAccount:
        description: >
          service account for kube-prometheus-stack webhooks-admission
        roles:
          - type: Role
            rulesType: CUSTOM
            rules:
              - apiGroups: ['']
                resources: ['secrets']
                verbs: ['get', 'create']
          - type: ClusterRole
            rulesType: CUSTOM
            rules:
              - apiGroups: ['admissionregistration.k8s.io']
                resources: ['validatingwebhookconfigurations','mutatingwebhookconfigurations']
                verbs: ['get','update']
              - apiGroups: ['policy']
                resources: ['podsecuritypolicies']
                verbs: ['use']

  grafana-sa:
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      serviceAccount:
        description: >
          service account for kube-prometheus-stack grafana
        roles:
          - type: Role
            rulesType: CUSTOM
            rules:
              - apiGroups: ['extensions', '']
                resources: ['podsecuritypolicies', 'secrets', 'configmaps']
                verbs: ['use', 'get', 'list', 'watch']

  prom-operator-sa:
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      serviceAccount:
        description: >
          service account for kube-prometheus-stack prometheusOperator
        roles:
          - type: ClusterRole
            rulesType: CUSTOM
            rules:
              - apiGroups: ['monitoring.coreos.com']
                resources: ['alertmanagers','alertmanagers/finalizers','alertmanagerconfigs','prometheuses','prometheuses/finalizers','thanosrulers','thanosrulers/finalizers','servicemonitors','podmonitors','probes','prometheusrules']
                verbs: ['*']
              - apiGroups: ['apps']
                resources: ['statefulsets']
                verbs: ['*']
              - apiGroups: ['']
                resources: ['configmaps','secrets']
                verbs: ['*']
              - apiGroups: ['']
                resources: ['pods']
                verbs: ['list', 'delete']
              - apiGroups: ['']
                resources: ['services','services/finalizers','endpoints']
                verbs: ['get','create','update','delete']
              - apiGroups: ['']
                resources: ['nodes']
                verbs: ['list','watch']
              - apiGroups: ['']
                resources: ['namespaces']
                verbs: ['get','list','watch']
              - apiGroups: ['networking.k8s.io']
                resources: ['ingress']
                verbs: ['get','list','watch']
              - apiGroups: ['policy']
                resources: ['podsecuritypolicies']
                verbs: ['use']

  prometheus-sa:
    type: string
    x-google-marketplace:
      type: SERVICE_ACCOUNT
      serviceAccount:
        description: >
          service account for kube-prometheus-stack prometheus
        roles:
          - type: ClusterRole
            rulesType: CUSTOM
            rules:
              - apiGroups: ['']
                resources: ['nodes','nodes/metrics','services','endpoints','pods']
                verbs: ['get','list','watch']
              - apiGroups: ['networking.k8s.io']
                resources: ['ingress']
                verbs: ['get','watch','list']
              - apiGroups: ['policy']
                resources: ['podsecuritypolicies']
                verbs: ['use']

  k8ssandra.cassandra.clusterName:
    type: string
    default: "k8ssandra-marketplace"
    description: name of the Cassandra cluster

  k8ssandra.cassandra.cassandraLibDirVolume.storageClass:
    type: string
    x-google-marketplace:
      type: STORAGE_CLASS
      storageClass:
        type: SSD

  k8ssandra.cassandra.cassandraLibDirVolume.size:
    type: string
    default: "10Gi"
    description: size of the storage volume for Cassandra

  k8ssandra.cassandra.heap.size:
    type: string
    default: "1G"

  k8ssandra.cassandra.heap.newGenSize:
    type: string
    default: "1G"

  k8ssandra.cassandra.resources.requests.cpu:
    type: string
    default: "1000m"

  k8ssandra.cassandra.resources.requests.memory:
    type: string
    default: "2Gi"

  k8ssandra.cassandra.resources.limits.cpu:
    type: string
    default: "1000m"

  k8ssandra.cassandra.resources.limits.memory:
    type: string
    default: "2Gi"

  # This syntax is not supported by GCP Marketplace out of the box, so
  # added some custom parsing magic in the deployer image.
  # see files/parse_cassandra_datacenters.py.
  k8ssandra.cassandra.datacenters[0].size:
    type: integer
    default: 3
    description: size of the datacenter

  k8ssandra.cassandra.datacenters[0].name:
    type: string
    x-google-marketplace:
      type: STRING
    default: dc1
    description: name of the datacenter

  k8ssandra.medusa.enabled:
    type: boolean
    description: Enable Medusa. Note storageCredentialsJSON must be set if this is turned on.
    default: false

  k8ssandra.medusa.bucketName:
    type: string
    description: GCS bucket name for Medusa
    default: prod-k8ssandra-storage-bucket

  k8ssandra.medusa.storageCredentialsJSON:
    type: string
    description: Contents of credentials.json for the service account created for use with Medusa's GCS bucket.
    default: '{}'

required:
  - name
  - namespace

